import React, { useEffect, useRef } from 'react';
import { Network, Eye, Brain, HelpCircle } from 'lucide-react';

interface KnowledgeGraphProps {
  graphData?: {
    graph?: {
      nodes: Array<{
        id: string;
        label: string;
        size: number;
        color: string;
        cluster: number;
        type?: string;
        description?: string;
        score?: number;
      }>;
      edges: Array<{
        source: string;
        target: string;
        weight: number;
        relationship?: string;
      }>;
    };
    insights?: {
      gaps: string[];
      questions: string[];
      clusters: Array<{
        id: number;
        label: string;
        concepts: string[];
      }>;
    };
    summary?: string;
    metadata?: {
      entityCount: number;
      timestamp: string;
      source: string;
    };
  };
  onQuestionClick: (question: string) => void;
  isVisible: boolean;
  onToggle: () => void;
}

export const KnowledgeGraph: React.FC<KnowledgeGraphProps> = ({
  graphData,
  onQuestionClick,
  isVisible,
  onToggle,
}) => {
  const graphRef = useRef<HTMLDivElement>(null);

  // Debug logging
  console.log('ðŸŽ¨ KnowledgeGraph component received props:', {
    graphData,
    isVisible,
    hasGraphData: !!graphData,
    graphDataKeys: graphData ? Object.keys(graphData) : null,
    nodeCount: graphData?.graph?.nodes?.length || 0,
    insightCount: graphData?.insights?.questions?.length || 0
  });

  // Extract data from the nested structure
  const graph = graphData?.graph;
  const insights = graphData?.insights;
  const summary = graphData?.summary;
  const metadata = graphData?.metadata;

  console.log('ðŸŽ¨ KnowledgeGraph extracted data:', { 
    graph: !!graph, 
    insights: !!insights, 
    summary: !!summary, 
    metadata: !!metadata,
    nodeCount: graph?.nodes?.length || 0,
    edgeCount: graph?.edges?.length || 0
  });

  useEffect(() => {
    if (isVisible && graph && graphRef.current) {
      // Here you would integrate with a graph visualization library like D3.js, vis.js, or sigma.js
      // For now, we'll show a placeholder
      renderGraph();
    }
  }, [isVisible, graph]);

  const renderGraph = () => {
    if (!graphRef.current || !graph) return;

    // Placeholder for actual graph rendering
    // You would use a library like D3.js or vis.js here
    const nodeCount = graph.nodes?.length || 0;
    const edgeCount = graph.edges?.length || 0;
    const sourceType = metadata?.source || 'unknown';
    
    console.log('Rendering graph with:', { nodeCount, edgeCount, sourceType });
    
    graphRef.current.innerHTML = `
      <div class="p-6 h-full">
        <div class="mb-6">
          <h3 class="text-lg font-semibold text-white mb-2">Knowledge Graph Visualization</h3>
          <p class="text-gray-400 text-sm">${nodeCount} entities, ${edgeCount} connections</p>
          <p class="text-xs mt-1 ${sourceType === 'google-kg' ? 'text-green-400' : 'text-yellow-400'}">
            ${sourceType === 'google-kg' ? 'âœ“ Generated by Google Knowledge Graph' : 'âš¡ Enhanced text analysis'}
          </p>
        </div>
        
        <div class="grid grid-cols-2 gap-4 mb-6">
          ${graph.nodes?.slice(0, 8).map(node => `
            <div class="p-3 bg-gray-700 rounded-lg">
              <div class="flex items-center space-x-2 mb-2">
                <div class="w-3 h-3 rounded-full" style="background-color: ${node.color}"></div>
                <span class="text-white font-medium text-sm">${node.label}</span>
              </div>
              ${node.type ? `<p class="text-xs text-gray-400">${node.type}</p>` : ''}
              ${node.description ? `<p class="text-xs text-gray-300 mt-1">${node.description.substring(0, 80)}...</p>` : ''}
            </div>
          `).join('') || ''}
        </div>
        
        <div class="text-center">
          <p class="text-gray-400 text-sm">Interactive graph visualization would appear here</p>
          <p class="text-gray-500 text-xs mt-1">Integration with D3.js, vis.js, or sigma.js recommended</p>
        </div>
      </div>
    `;
  };

  if (!isVisible) {
    return (
      <button
        onClick={onToggle}
        className="fixed bottom-6 right-6 p-3 bg-purple-600 text-white rounded-full shadow-lg hover:bg-purple-700 transition-colors z-50"
        title="Show Knowledge Graph"
      >
        <Brain className="w-6 h-6" />
      </button>
    );
  }

  // Add fallback content when no data is available
  if (!graphData) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-6xl h-5/6 flex flex-col">
          <div className="p-6 border-b border-gray-700 flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Brain className="w-6 h-6 text-purple-500" />
              <h2 className="text-xl font-semibold text-white">Knowledge Graph Analysis</h2>
            </div>
            <button
              onClick={onToggle}
              className="p-2 text-gray-400 hover:text-white transition-colors"
            >
              <Eye className="w-5 h-5" />
            </button>
          </div>
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center">
              <Brain className="w-16 h-16 text-gray-600 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-white mb-2">No Knowledge Graph Data</h3>
              <p className="text-gray-400">Ask a question to generate knowledge graph analysis</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-gray-800 rounded-xl border border-gray-700 w-full max-w-6xl h-5/6 flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-gray-700 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Brain className="w-6 h-6 text-purple-500" />
            <h2 className="text-xl font-semibold text-white">Knowledge Graph Analysis</h2>
          </div>
          <button
            onClick={onToggle}
            className="p-2 text-gray-400 hover:text-white transition-colors"
          >
            <Eye className="w-5 h-5" />
          </button>
        </div>

        <div className="flex-1 flex">
          {/* Graph Visualization */}
          <div className="flex-1 p-6">
            <div
              ref={graphRef}
              className="w-full h-full bg-gray-900 rounded-lg border border-gray-600"
            >
              {/* Fallback content while graph loads */}
              <div className="p-6 h-full flex items-center justify-center">
                <div className="text-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500 mx-auto mb-4"></div>
                  <p className="text-gray-400">Loading knowledge graph...</p>
                </div>
              </div>
            </div>
          </div>

          {/* Insights Panel */}
          <div className="w-80 border-l border-gray-700 p-6 overflow-y-auto">
            <div className="space-y-6">
              {/* Summary */}
              {summary && (
                <div>
                  <h3 className="text-lg font-semibold text-white mb-4">Analysis Summary</h3>
                  <div className="p-3 bg-gray-700 rounded-lg">
                    <p className="text-gray-300 text-sm">{summary}</p>
                  </div>
                </div>
              )}

              {/* Suggested Questions */}
              {insights?.questions && insights.questions.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-white mb-4 flex items-center space-x-2">
                    <HelpCircle className="w-5 h-5 text-blue-500" />
                    <span>Suggested Questions</span>
                  </h3>
                  <div className="space-y-2">
                    {insights.questions.map((question, index) => (
                      <button
                        key={index}
                        onClick={() => onQuestionClick(question)}
                        className="w-full p-3 text-left bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors"
                      >
                        {question}
                      </button>
                    ))}
                  </div>
                </div>
              )}

              {/* Knowledge Gaps */}
              {insights?.gaps && insights.gaps.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-white mb-4">Content Gaps</h3>
                  <div className="space-y-2">
                    {insights.gaps.map((gap, index) => (
                      <div
                        key={index}
                        className="p-3 bg-amber-900/20 border border-amber-700/30 rounded-lg"
                      >
                        <p className="text-amber-200 text-sm">{gap}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Concept Clusters */}
              {insights?.clusters && insights.clusters.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-white mb-4">Concept Clusters</h3>
                  <div className="space-y-3">
                    {insights.clusters.map((cluster) => (
                      <div key={cluster.id} className="p-3 bg-gray-700 rounded-lg">
                        <h4 className="font-medium text-white mb-2">{cluster.label}</h4>
                        <div className="flex flex-wrap gap-1">
                          {cluster.concepts.map((concept, index) => (
                            <span
                              key={index}
                              className="px-2 py-1 bg-gray-600 text-gray-300 text-xs rounded"
                            >
                              {concept}
                            </span>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Metadata */}
              {metadata && (
                <div className="pt-4 border-t border-gray-700">
                  <h4 className="text-sm font-medium text-gray-400 mb-2">Knowledge Graph Info</h4>
                  <div className="text-xs text-gray-500 space-y-1">
                    {metadata.entityCount && (
                      <p>Entities: {metadata.entityCount}</p>
                    )}
                    {metadata.source && (
                      <p>Source: {metadata.source === 'google-kg' ? 'Google Knowledge Graph' : 'Enhanced Text Analysis'}</p>
                    )}
                    {metadata.timestamp && (
                      <p>Generated: {new Date(parseInt(metadata.timestamp)).toLocaleString()}</p>
                    )}
                  </div>
                </div>
              )}

              {/* Debug Info */}
              <div className="pt-4 border-t border-gray-700">
                <h4 className="text-sm font-medium text-gray-400 mb-2">Debug Info</h4>
                <div className="text-xs text-gray-500 space-y-1">
                  <p>Graph Data: {graphData ? 'Available' : 'Missing'}</p>
                  <p>Nodes: {graph?.nodes?.length || 0}</p>
                  <p>Edges: {graph?.edges?.length || 0}</p>
                  <p>Questions: {insights?.questions?.length || 0}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};